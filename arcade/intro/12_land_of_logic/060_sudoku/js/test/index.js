const expect = require('chai').expect;
const fns = require('..').fns;
console.log('fns === ', fns);

describe("testing ", () => {
  const tests = [
    {
      fn: '', // sudoku(grid)
      ins_and_outs: [
        {
          cxt: 'simple test',
          in: [
            [1,3,2,5,4,6,9,8,7],
            [4,6,5,8,7,9,3,2,1],
            [7,9,8,2,1,3,6,5,4],
            [9,2,1,4,3,5,8,7,6],
            [3,5,4,7,6,8,2,1,9],
            [6,8,7,1,9,2,5,4,3],
            [5,7,6,9,8,1,4,3,2],
            [2,4,3,6,5,7,1,9,8],
            [8,1,9,3,2,4,7,6,5]
          ],
          out: true,
        },{
          cxt: 'simple test',
          in: [
            [1,3,2,5,4,6,9,2,7],
            [4,6,5,8,7,9,3,8,1],
            [7,9,8,2,1,3,6,5,4],
            [9,2,1,4,3,5,8,7,6],
            [3,5,4,7,6,8,2,1,9],
            [6,8,7,1,9,2,5,4,3],
            [5,7,6,9,8,1,4,3,2],
            [2,4,3,6,5,7,1,9,8],
            [8,1,9,3,2,4,7,6,5]
          ],
          out: false,
        },{
          cxt: 'simple test',
          in: [
            [1,3,4,2,5,6,9,8,7],
            [4,6,8,5,7,9,3,2,1],
            [7,9,2,8,1,3,6,5,4],
            [9,2,3,1,4,5,8,7,6],
            [3,5,7,4,6,8,2,1,9],
            [6,8,1,7,9,2,5,4,3],
            [5,7,6,9,8,1,4,3,2],
            [2,4,5,6,3,7,1,9,8],
            [8,1,9,3,2,4,7,6,5]
          ],
          out: false,
        },{
          cxt: 'simple test',
          in: [
            [1,3,2,5,4,6,9,8,7],
            [4,6,5,8,7,9,3,2,1],
            [7,9,8,2,1,3,6,5,4],
            [9,2,1,4,3,5,8,7,6],
            [3,5,4,7,6,8,2,1,9],
            [6,8,7,1,9,2,5,4,3],
            [5,4,6,9,8,1,4,3,2],
            [2,7,3,6,5,7,1,9,8],
            [8,1,9,3,2,4,7,6,5]
          ],
          out: false,
        },{
          cxt: 'simple test',
          in: [
            [1,2,3,4,5,6,7,8,9],
            [4,6,5,8,7,9,3,2,1],
            [7,9,8,2,1,3,6,5,4],
            [1,2,3,4,5,6,7,8,9],
            [4,6,5,8,7,9,3,2,1],
            [7,9,8,2,1,3,6,5,4],
            [1,2,3,4,5,6,7,8,9],
            [4,6,5,8,7,9,3,2,1],
            [7,9,8,2,1,3,6,5,4]
          ],
          out: false,
        },{
          cxt: 'simple test',
          in: [
            [5,3,4,6,7,8,9,1,2],
            [6,7,2,1,9,5,3,4,8],
            [1,9,8,3,4,2,5,6,7],
            [8,5,9,9,6,1,4,2,3],
            [4,2,6,8,5,3,7,9,1],
            [7,1,3,7,2,4,8,5,6],
            [9,6,1,5,3,7,2,8,4],
            [2,8,7,4,1,9,6,3,5],
            [3,4,5,2,8,6,1,7,9]
          ],
          out: false,
        },{
          cxt: 'simple test',
          in: [
            [5,5,5,5,5,5,5,5,5],
            [5,5,5,5,5,5,5,5,5],
            [5,5,5,5,5,5,5,5,5],
            [5,5,5,5,5,5,5,5,5],
            [5,5,5,5,5,5,5,5,5],
            [5,5,5,5,5,5,5,5,5],
            [5,5,5,5,5,5,5,5,5],
            [5,5,5,5,5,5,5,5,5],
            [5,5,5,5,5,5,5,5,5]
          ],
          out: false,
        },
      ],
      run: param => {
        const cxt = param.fn.name + '() ' + param.cxt;
        it(cxt, () => {
          expect(param.fn(param.in)).to.deep.equal(param.out);
        });
      }
    }/*, {
      fn: '', // name
      ins_and_outs: [
        {
          cxt: 'simple test',
          in: [],
          out: true,
        },
      ],
      run: param => {
        const cxt = param.fn.name + '() ' + param.cxt;
        it(cxt, () => {
          expect(param.fn(...param.in)).to.deep.equal(param.out);
        });
      }
    }
    */
  ];
  tests.forEach((test, testIdx) => {
    test.fn = fns[testIdx]; // sets functions according to order set in index.js
    test.ins_and_outs.forEach(params => {
      params.fn = test.fn;
      test.run(params);
    });
  });
});
